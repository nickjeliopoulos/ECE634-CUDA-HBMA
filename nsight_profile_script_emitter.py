import os
import argparse

def profile_script_filename_formatter(args: argparse.Namespace) -> str:
	"""
	Generate a filename for the profile script based on the HBMA class name and version.
	"""
	return os.path.join("nsight/", "{}_{}_nsight_profile_script.py".format(args.hbma_class_name, args.version))

def get_import_code() -> str:
	"""
	Generate a string that contains the import statements for the HBMA operator.
	"""
	return "import torch\nfrom hbma.torch_naive_hbma import HBMA_Naive, HBMA_Optimized\nfrom hbma.torch_fused_cuda_hbma import HBMA_CUDA_Fused\n"

def get_module_init_code(args: argparse.Namespace) -> str:
	"""
	Generate a string that contains the problem size constants for the HBMA operator.
	"""
	_parameter_string = "module = {}(version={}, levels={}, block_size=({},{}), block_max_neighbor_search_distance={}, input_image_size=({}, {})).to(\"cuda:0\")\n"

	return _parameter_string.format(
		args.hbma_class_name,
		args.version,
		args.levels,
		args.block_size[0],
		args.block_size[1],
		args.neighborhood_size,
		args.input_image_size[0],
		args.input_image_size[1]
	)

def emit(args: argparse.Namespace) -> None:
	"""
	Emit a benchmark script that invokes an HBMA operator. 
	The emitted script can be easily used with NSight Compute/Systems for profiling.
	"""
	hbma_import_code = get_import_code()
	hbma_module_init_code = get_module_init_code(args)
	script_filename = profile_script_filename_formatter(args)

	code = ""
	code += "### Profiling script for HBMA operator\n"
	code += "### Generated by profile_script_emitter.py\n"
	code += "\n"
	code += hbma_import_code
	code += "\n"
	code += "### Initialize HBMA Module\n"
	code += hbma_module_init_code
	code += "\n"

	try:
		with open(script_filename, "w") as f:
			f.write(code)
	except FileNotFoundError as e:
		print(f"File not found error: {e}")
	except PermissionError as e:
		print(f"Permission error: {e}")
	except OSError as e:
		print(f"OS error: {e}")

if __name__ == "__main__":
	parser = argparse.ArgumentParser(description="HBMA Profiling Script Emitter")
	parser.add_argument("--hbma-class-name", type=str, default="HBMA_Naive", help="Class name of the HBMA operator")
	parser.add_argument("--block-size", type=int, nargs=2, default=(8, 8), help="Block size for HBMA operator")
	parser.add_argument("--neighborhood-size", type=int, default=1, help="Max neighbor search distance for HBMA operator")
	parser.add_argument("--input-image-size", type=int, nargs=2, default=(224, 224), help="Input image size for HBMA operator")
	parser.add_argument("--levels", type=int, default=1, help="Levels for HBMA operator")
	parser.add_argument("--version", type=str, default="v0", choices=["v0", "v1"], help="Version of HBMA operator")
	args = parser.parse_args()

	emit(args)
